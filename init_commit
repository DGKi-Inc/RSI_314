import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# === 1. Download Historical Stock Data ===
symbol = 'AAPL'
data = yf.download(symbol, start='2020-01-01', end='2024-01-01')

# === 2. Compute RSI ===
def compute_rsi(prices, window=14):
    delta = np.diff(prices)
    gain = np.maximum(delta, 0)
    loss = -np.minimum(delta, 0)

    avg_gain = np.convolve(gain, np.ones(window) / window, mode='valid')
    avg_loss = np.convolve(loss, np.ones(window) / window, mode='valid')

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    # Pad initial values to match length of prices
    rsi = np.concatenate([np.full(window, np.nan), rsi])
    return rsi

data['RSI'] = compute_rsi(data['Close'].values)

# Drop initial NaNs caused by RSI computation
data = data.dropna()

# === 3. Scale RSI Data ===
scaler = MinMaxScaler(feature_range=(0, 1))
rsi_scaled = scaler.fit_transform(data['RSI'].values.reshape(-1, 1))

# === 4. Create Sequences for LSTM Training ===
def create_sequences(data, window_size=50):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size])
    return np.array(X), np.array(y)

X, y = create_sequences(rsi_scaled)

# === 5. Train/Test Split ===
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# === 6. Build LSTM Model ===
model = Sequential()
model.add(LSTM(units=50, return_sequences=False, input_shape=(X.shape[1], 1)))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# === 7. Train Model ===
model.fit(X_train, y_train, epochs=25, batch_size=32, verbose=1)

# === 8. Make Predictions ===
y_pred = model.predict(X_test)

# Inverse transform back to RSI scale
y_test_rescaled = scaler.inverse_transform(y_test)
y_pred_rescaled = scaler.inverse_transform(y_pred)

# === 9. Plot Actual vs Predicted RSI ===
plt.figure(figsize=(12, 6))
plt.plot(data.index[-len(y_test):], y_test_rescaled, label='Actual RSI', color='green')
plt.plot(data.index[-len(y_test):], y_pred_rescaled, label='Predicted RSI', color='red')
plt.axhline(70, color='orange', linestyle='--', label='Overbought (70)')
plt.axhline(30, color='purple', linestyle='--', label='Oversold (30)')
plt.title(f'{symbol} RSI Prediction using LSTM')
plt.legend()
plt.show()

#plot actual vs predicted prices


#
